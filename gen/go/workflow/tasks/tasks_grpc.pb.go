// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0--rc3
// source: workflow/tasks/tasks.proto

package tasksv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TaskService_CreateTask_FullMethodName             = "/tasks.TaskService/CreateTask"
	TaskService_GetTask_FullMethodName                = "/tasks.TaskService/GetTask"
	TaskService_ListTasks_FullMethodName              = "/tasks.TaskService/ListTasks"
	TaskService_ChangeTaskStatus_FullMethodName       = "/tasks.TaskService/ChangeTaskStatus"
	TaskService_AddCaseToTask_FullMethodName          = "/tasks.TaskService/AddCaseToTask"
	TaskService_AddSolutionToTask_FullMethodName      = "/tasks.TaskService/AddSolutionToTask"
	TaskService_RemoveSolutionFromTask_FullMethodName = "/tasks.TaskService/RemoveSolutionFromTask"
	TaskService_RemoveCaseFromTask_FullMethodName     = "/tasks.TaskService/RemoveCaseFromTask"
)

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskServiceClient interface {
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*Task, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Task, error)
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error)
	ChangeTaskStatus(ctx context.Context, in *ChangeTaskStatusRequest, opts ...grpc.CallOption) (*Task, error)
	AddCaseToTask(ctx context.Context, in *AddCaseToTaskRequest, opts ...grpc.CallOption) (*Task, error)
	AddSolutionToTask(ctx context.Context, in *AddSolutionToTaskRequest, opts ...grpc.CallOption) (*Task, error)
	RemoveSolutionFromTask(ctx context.Context, in *RemoveSolutionFromTaskRequest, opts ...grpc.CallOption) (*Task, error)
	RemoveCaseFromTask(ctx context.Context, in *RemoveCaseFromTaskRequest, opts ...grpc.CallOption) (*Task, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, TaskService_CreateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, TaskService_GetTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error) {
	out := new(ListTasksResponse)
	err := c.cc.Invoke(ctx, TaskService_ListTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ChangeTaskStatus(ctx context.Context, in *ChangeTaskStatusRequest, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, TaskService_ChangeTaskStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) AddCaseToTask(ctx context.Context, in *AddCaseToTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, TaskService_AddCaseToTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) AddSolutionToTask(ctx context.Context, in *AddSolutionToTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, TaskService_AddSolutionToTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) RemoveSolutionFromTask(ctx context.Context, in *RemoveSolutionFromTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, TaskService_RemoveSolutionFromTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) RemoveCaseFromTask(ctx context.Context, in *RemoveCaseFromTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, TaskService_RemoveCaseFromTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
// All implementations must embed UnimplementedTaskServiceServer
// for forward compatibility
type TaskServiceServer interface {
	CreateTask(context.Context, *CreateTaskRequest) (*Task, error)
	GetTask(context.Context, *GetTaskRequest) (*Task, error)
	ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error)
	ChangeTaskStatus(context.Context, *ChangeTaskStatusRequest) (*Task, error)
	AddCaseToTask(context.Context, *AddCaseToTaskRequest) (*Task, error)
	AddSolutionToTask(context.Context, *AddSolutionToTaskRequest) (*Task, error)
	RemoveSolutionFromTask(context.Context, *RemoveSolutionFromTaskRequest) (*Task, error)
	RemoveCaseFromTask(context.Context, *RemoveCaseFromTaskRequest) (*Task, error)
	mustEmbedUnimplementedTaskServiceServer()
}

// UnimplementedTaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskServiceServer struct {
}

func (UnimplementedTaskServiceServer) CreateTask(context.Context, *CreateTaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTaskServiceServer) GetTask(context.Context, *GetTaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTaskServiceServer) ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedTaskServiceServer) ChangeTaskStatus(context.Context, *ChangeTaskStatusRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeTaskStatus not implemented")
}
func (UnimplementedTaskServiceServer) AddCaseToTask(context.Context, *AddCaseToTaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCaseToTask not implemented")
}
func (UnimplementedTaskServiceServer) AddSolutionToTask(context.Context, *AddSolutionToTaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSolutionToTask not implemented")
}
func (UnimplementedTaskServiceServer) RemoveSolutionFromTask(context.Context, *RemoveSolutionFromTaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSolutionFromTask not implemented")
}
func (UnimplementedTaskServiceServer) RemoveCaseFromTask(context.Context, *RemoveCaseFromTaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCaseFromTask not implemented")
}
func (UnimplementedTaskServiceServer) mustEmbedUnimplementedTaskServiceServer() {}

// UnsafeTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServiceServer will
// result in compilation errors.
type UnsafeTaskServiceServer interface {
	mustEmbedUnimplementedTaskServiceServer()
}

func RegisterTaskServiceServer(s grpc.ServiceRegistrar, srv TaskServiceServer) {
	s.RegisterService(&TaskService_ServiceDesc, srv)
}

func _TaskService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_ListTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ChangeTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ChangeTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_ChangeTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ChangeTaskStatus(ctx, req.(*ChangeTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_AddCaseToTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCaseToTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).AddCaseToTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_AddCaseToTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).AddCaseToTask(ctx, req.(*AddCaseToTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_AddSolutionToTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSolutionToTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).AddSolutionToTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_AddSolutionToTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).AddSolutionToTask(ctx, req.(*AddSolutionToTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_RemoveSolutionFromTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSolutionFromTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).RemoveSolutionFromTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_RemoveSolutionFromTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).RemoveSolutionFromTask(ctx, req.(*RemoveSolutionFromTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_RemoveCaseFromTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCaseFromTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).RemoveCaseFromTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_RemoveCaseFromTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).RemoveCaseFromTask(ctx, req.(*RemoveCaseFromTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskService_ServiceDesc is the grpc.ServiceDesc for TaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tasks.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _TaskService_CreateTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _TaskService_GetTask_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _TaskService_ListTasks_Handler,
		},
		{
			MethodName: "ChangeTaskStatus",
			Handler:    _TaskService_ChangeTaskStatus_Handler,
		},
		{
			MethodName: "AddCaseToTask",
			Handler:    _TaskService_AddCaseToTask_Handler,
		},
		{
			MethodName: "AddSolutionToTask",
			Handler:    _TaskService_AddSolutionToTask_Handler,
		},
		{
			MethodName: "RemoveSolutionFromTask",
			Handler:    _TaskService_RemoveSolutionFromTask_Handler,
		},
		{
			MethodName: "RemoveCaseFromTask",
			Handler:    _TaskService_RemoveCaseFromTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workflow/tasks/tasks.proto",
}
